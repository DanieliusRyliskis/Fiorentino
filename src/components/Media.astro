---
import { getImage } from 'astro:assets';

interface Props {
    language: string;
}

const { language } = Astro.props;

const renderContent = () => {
    if (language === 'lt') {
        const content = [
            'Galerija',
            'Nuotrauka',
            'Piktograma, kuri uždaro galerijos stebėjimą',
            'Piktograma, kuri sugrįžta prie praeitos nuotraukos',
            'Piktograma, kuri pereina prie sekančios nuotraukos',
        ];
        return content;
    } else if (language === 'en') {
        const content = [
            'Gallery',
            'Picture',
            'The icon that closes the gallery observation',
            'An icon that goes back to a previous photo',
            'An icon that moves on to the next picture',
        ];
        return content;
    } else if (language === 'it') {
        const content = [
            'Galleria',
            'Immagine',
            "L'icona che chiude l'osservazione della galleria",
            "Un'icona che torna a una foto precedente",
            "Un'icona che passa all'immagine successiva",
        ];

        return content;
    }
};

// File Sorting
const markdowns = await Astro.glob('/src/assets/pictures/*.md');
const frontmatter = markdowns.map((f) => f.frontmatter);
const images = await import.meta.glob('/src/assets/pictures/*.jpg', {
    eager: true,
});

// Without await Promise.allSettled Would Return Array Of Promises
// You Can Use Top-Level Await If It's ES Module

const promises = frontmatter.map((data) =>
    getImage({
        src: images[data.file_path].default,
        format: 'avif',
        widths: [600, 900, images[data.file_path].default.width],
        quality: 'high',
    }),
);
const results = await Promise.allSettled(promises);
const errors = results.filter((result) => result.status === "rejected")
const fulfilled = results.filter((result) => result.status === "fulfilled").map((result) => result.value.srcSet)

console.log(fulfilled)
if (errors.length > 0) {
    errors.forEach((error) => console.log(`Error: ${error.reason.title}`))
}


const sortOldest = function (categoryName) {
    const filtered = frontmatter.filter(
        (file) => file.category === categoryName,
    );
    const sorted = filtered.sort((a, b) =>
        a.publish_date.localeCompare(b.publish_date),
    );
    return sorted;
};
const left = sortOldest('Left (Horizontal)');
const middle = sortOldest('Middle (Vertical)');
const right = sortOldest('Right (Horizontal)');

// Could Create Avifs, Webps, Jpegs And The Use Them In Picture Component
---

<section id="section4">
    <h3
        class="cormorant-garamond-regular text-header text-3xl text-center section-padding"
    >
        {renderContent()[0]}
    </h3>

    <!-- Modal Window -->
    <div
        class="hidden fixed z-20 top-0 left-0 w-screen h-screen bg-black opacity-50"
        id="modal"
    >
    </div>
    <!-- Gallery Interface -->
    <div
        class="hidden fixed z-50 w-screen h-screen top-0 left-0"
        id="interface"
    >
        <img
            class="absolute top-[2%] right-[2%] cursor-pointer"
            src="/svg/Close.svg"
            id="closeIcon"
            alt={renderContent()[2]}
            decoding="async"
        />
        <img
            class="absolute top-1/2 translate-y-[-50%] left-[5%] hidden lg:inline-block cursor-pointer"
            src="/svg/Arrow_left.svg"
            id="arrowLeft"
            alt={renderContent()[3]}
            decoding="async"
        />
        <img
            class="absolute top-1/2 translate-y-[-50%] right-[5%] hidden lg:inline-block cursor-pointer"
            src="/svg/Arrow_right.svg"
            id="arrowRight"
            alt={renderContent()[4]}
            decoding="async"
        />
        <div class="w-full h-full" id="background"></div>
    </div>
</section>
