---
import { getImage } from 'astro:assets';
import Gallery from './Gallery.jsx'

interface Props {
    language: string;
}

const { language } = Astro.props;

const renderContent = () => {
    if (language === 'lt') {
        const content = [
            'Galerija',
            'Nuotrauka',
            'Piktograma, kuri uždaro galerijos stebėjimą',
            'Piktograma, kuri sugrįžta prie praeitos nuotraukos',
            'Piktograma, kuri pereina prie sekančios nuotraukos',
        ];
        return content;
    } else if (language === 'en') {
        const content = [
            'Gallery',
            'Picture',
            'The icon that closes the gallery observation',
            'An icon that goes back to a previous photo',
            'An icon that moves on to the next picture',
        ];
        return content;
    } else if (language === 'it') {
        const content = [
            'Galleria',
            'Immagine',
            "L'icona che chiude l'osservazione della galleria",
            "Un'icona che torna a una foto precedente",
            "Un'icona che passa all'immagine successiva",
        ];

        return content;
    }
};

const generateImages = async function () {
    try {
        // Imports Markdown Files
        const markdowns = await Astro.glob('/src/assets/pictures/*.md');
        // Access The Frontmatter Of Markdown Files
        const frontmatter = markdowns.map((f) => f.frontmatter);
        // Imports Images From src/ Directory
        // Don't Need An Await Because eager:true Makes The Import Resolve Immediately
        const images = import.meta.glob('/src/assets/pictures/*.jpg', {
            eager: true,
        });

        const optimizedImages = {
            avif: {
                left: [],
                middle: [],
                right: [],
            },
            webp: {
                left: [],
                middle: [],
                right: [],
            },
            jpg: {
                left: [],
                middle: [],
                right: [],
            },
        };

        const formats = ['avif', 'webp', 'jpg'];

        // Loops Through Different Formats And Adds Them To optimizedImages Object
        for (const format of formats) {
            const promises = frontmatter.map(async (data) => {
                const getImageData = await getImage({
                    src: images[data.image].default,
                    format: format,
                    widths: [600, 900, images[data.image].default.width],
                    quality: 'high',
                });
                // Adds Metadata From Markdown To getImageData Object
                return {
                    ...getImageData,
                    category: data.category,
                    publish_date: data.publish_date,
                };
            });

            // Without await Promise.allSettled Would Return Array Of Promises
            const results = await Promise.allSettled(promises);

            // Filters Out Rejected And Fullfilled Promises
            const errors = results.filter(
                (result) => result.status === 'rejected',
            );
            const fulfilled = results
                .filter((result) => result.status === 'fulfilled')
                .map((result) => result.value);

            // Prints Out An Error From A Rejected Promise
            if (errors.length > 0) {
                errors.forEach((error) =>
                    console.error(`Error: ${error.reason.title}`),
                );
            }

            // Filters An Array Of Objects By Their Category Name And Then Sorts Them By Date From Oldest To Newest
            const sortOldest = function (categoryName) {
                const filtered = fulfilled.filter(
                    (imgObj) => imgObj.category === categoryName,
                );
                const sorted = filtered.sort((a, b) =>
                    a.publish_date.localeCompare(b.publish_date),
                );
                return sorted;
            };

            // Adds Currently Iterated Format That Is Filtered By Category And Sorted By Date To optimizedImages Object
            const left = sortOldest('Left (Horizontal)');
            optimizedImages[format].left = left;
            const middle = sortOldest('Middle (Vertical)');
            optimizedImages[format].middle = middle;
            const right = sortOldest('Right (Horizontal)');
            optimizedImages[format].right = right;
        }

        return optimizedImages;
    } catch (error) {
        console.error(error);
    }
};

const content = renderContent()
const optimizedImages = await generateImages();
---

<section id="section4">
    <h3
        class="cormorant-garamond-regular text-header text-3xl text-center section-padding"
    >
        {renderContent()[0]}
    </h3>
        <Gallery client:visible optimizedImages={optimizedImages}/>     

    <!-- Modal Window -->
    <div
        class="hidden fixed z-20 top-0 left-0 w-screen h-screen bg-black opacity-50"
        id="modal"
    >
    </div>
    <!-- Gallery Interface -->
    <div
        class="hidden fixed z-50 w-screen h-screen top-0 left-0"
        id="interface"
    >
        <img
            class="absolute top-[2%] right-[2%] cursor-pointer"
            src="/svg/Close.svg"
            id="closeIcon"
            alt={renderContent()[2]}
            decoding="async"
        />
        <img
            class="absolute top-1/2 translate-y-[-50%] left-[5%] hidden lg:inline-block cursor-pointer"
            src="/svg/Arrow_left.svg"
            id="arrowLeft"
            alt={renderContent()[3]}
            decoding="async"
        />
        <img
            class="absolute top-1/2 translate-y-[-50%] right-[5%] hidden lg:inline-block cursor-pointer"
            src="/svg/Arrow_right.svg"
            id="arrowRight"
            alt={renderContent()[4]}
            decoding="async"
        />
        <div class="w-full h-full" id="background"></div>
    </div>
</section>
